// Mocks generated by Mockito 5.3.2 from annotations
// in restr/test/unit/home/restaurant_list_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restr/src/features/restaurant/application/restaurant_service.dart'
    as _i4;
import 'package:restr/src/features/restaurant/domain/restaurant.dart' as _i9;
import 'package:restr/src/features/restaurant/domain/restaurant_detail.dart'
    as _i7;
import 'package:restr/src/features/restaurant/domain/restaurant_list.dart'
    as _i6;
import 'package:restr/src/features/restaurant/domain/restaurant_search.dart'
    as _i8;
import 'package:restr/src/services/network/api_result.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRef_0<State extends Object?> extends _i1.SmartFake
    implements _i2.Ref<State> {
  _FakeRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResult_1<T> extends _i1.SmartFake implements _i3.ApiResult<T> {
  _FakeApiResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantService extends _i1.Mock implements _i4.RestaurantService {
  MockRestaurantService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.Ref<Object?>);
  @override
  _i5.Future<_i3.ApiResult<_i6.RestaurantList>> getRestaurantList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantList,
          [],
        ),
        returnValue: _i5.Future<_i3.ApiResult<_i6.RestaurantList>>.value(
            _FakeApiResult_1<_i6.RestaurantList>(
          this,
          Invocation.method(
            #getRestaurantList,
            [],
          ),
        )),
      ) as _i5.Future<_i3.ApiResult<_i6.RestaurantList>>);
  @override
  _i5.Future<_i3.ApiResult<_i7.RestaurantDetail>> getRestaurantDetail(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantDetail,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.ApiResult<_i7.RestaurantDetail>>.value(
            _FakeApiResult_1<_i7.RestaurantDetail>(
          this,
          Invocation.method(
            #getRestaurantDetail,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.ApiResult<_i7.RestaurantDetail>>);
  @override
  _i5.Future<_i3.ApiResult<_i8.RestaurantSearch>> getRestaurantSearch(
          {required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantSearch,
          [],
          {#query: query},
        ),
        returnValue: _i5.Future<_i3.ApiResult<_i8.RestaurantSearch>>.value(
            _FakeApiResult_1<_i8.RestaurantSearch>(
          this,
          Invocation.method(
            #getRestaurantSearch,
            [],
            {#query: query},
          ),
        )),
      ) as _i5.Future<_i3.ApiResult<_i8.RestaurantSearch>>);
  @override
  void saveFavoriteRestaurant({required _i9.Restaurant? restaurant}) =>
      super.noSuchMethod(
        Invocation.method(
          #saveFavoriteRestaurant,
          [],
          {#restaurant: restaurant},
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i9.Restaurant> getAllFavoriteRestaurant() => (super.noSuchMethod(
        Invocation.method(
          #getAllFavoriteRestaurant,
          [],
        ),
        returnValue: <_i9.Restaurant>[],
      ) as List<_i9.Restaurant>);
  @override
  void deleteFavoriteRestaurant({required String? restaurantId}) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteRestaurant,
          [],
          {#restaurantId: restaurantId},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isFavoriteRestaurantExist({required String? restaurantId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFavoriteRestaurantExist,
          [],
          {#restaurantId: restaurantId},
        ),
        returnValue: false,
      ) as bool);
}
